// main.js
const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const { getAppPath, getResourcePath, getPythonExecutablePath } = require('./utils/paths');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ—Ä—Ç–æ–º
const portFile = path.join(getResourcePath(), 'port.txt');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const MAX_LOG_SIZE = 1024 * 1024
const logFile = path.join(getResourcePath(), 'server.log');

// –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç MAX_LOG_SIZE –ë–∞–π—Ç ‚Äì –æ—á–∏—Å—Ç–∏—Ç—å –µ–≥–æ
if (fs.existsSync(logFile)) {
  const stats = fs.statSync(logFile);
  if (stats.size > MAX_LOG_SIZE) {
    fs.writeFileSync(logFile, '');
  }
}
const logStream = fs.createWriteStream(logFile, { flags: 'a', encoding: "utf-8" });
logStream.write("\n\n–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n");


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = (message, type = 'INFO') => {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${type}] ${message}\n`;
  console.log(logMessage.trim());
  logStream.write(logMessage);
};


let mainWindow;
let server = null;

function createWindow() {
  log('–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  mainWindow = new BrowserWindow({
    width: 1000,
    height: 850,
    resizable: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      preload: path.join(__dirname, 'preload.js')
    }
  });

  mainWindow.loadFile(path.join(getAppPath(), 'src/loading.html'));
  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
    log('–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é');
  });

  startServer().then(() => {
    mainWindow.loadFile(path.join(getAppPath(), 'src/index.html'));
    log('–ó–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  }).catch((err) => {
    log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`, 'ERROR');
    dialog.showErrorBox('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ `server.log`');
  });
}

app.whenReady().then(createWindow);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
ipcMain.handle('predict-image', async (event) => {
  return new Promise((resolve, reject) => {
    dialog.showOpenDialog({
      properties: ['openFile'],
      filters: [
        { name: 'Images', extensions: ['jpg', 'jpeg', 'png', 'gif'] }
      ]
    }).then(result => {
      if (!result.canceled && result.filePaths.length > 0) {
        const filePath = result.filePaths[0];
        log(`–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${filePath}`);

        mainWindow.webContents.send('image-selected', filePath);

        if (!fs.existsSync(filePath)) {
          log(`–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${filePath}`, 'ERROR');
          reject(new Error('–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'));
          return;
        }

        log(`–ó–∞–ø—É—Å–∫ Python-—Å–∫—Ä–∏–ø—Ç–∞ predict —Å —Ñ–∞–π–ª–æ–º: ${filePath}`);
        
        const predictPath = getPythonExecutablePath('predict');
        const pythonProcess = spawn(predictPath, [filePath], {
          cwd: getResourcePath()
        });
        
        let dataString = '';

        pythonProcess.stdout.on('data', (data) => {
          dataString += data.toString();
          log(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Python: ${dataString.trim()}`);
        });

        pythonProcess.stderr.on('data', (data) => {
          log(`–û—à–∏–±–∫–∞ Python: ${data.toString().trim()}`, 'ERROR');
        });

        pythonProcess.on('close', (code) => {
          log(`Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
          if (code === 0) {
            try {
              const result = JSON.parse(dataString);
              log(`–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result)}`);
              resolve(result);
            } catch (error) {
              log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: ${error.message}`, 'ERROR');
              reject(new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ' + error.message));
            }
          } else {
            log(`–ù–ï–£–î–ê–ß–ê: –∫–æ–¥ ${code}`, 'ERROR');
            reject(new Error(`–ù–ï–£–î–ê–ß–ê: –∫–æ–¥ ${code}`));
          }
        });

        pythonProcess.on('error', (error) => {
          log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error.message}`, 'ERROR');
          reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–∞: ' + error.message));
        });
      }
    }).catch(error => {
      log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞: ${error.message}`, 'ERROR');
      reject(error);
    });
  });
});

function waitForServerReady(port, timeout = 30000) {
  const axios = require('axios');
  const startTime = Date.now();

  return new Promise((resolve, reject) => {
    const interval = setInterval(async () => {
      try {
        const res = await axios.get(`http://127.0.0.1:${port}/ping`);
        log("–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª");
        if (res.status === 200) {
          clearInterval(interval);
          resolve();
        }
      } catch (err) {
        if (Date.now() - startTime > timeout) {
          clearInterval(interval);
          log('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è', 'ERROR');
          reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è'));
        }
      }
    }, 500);
  });
}

function startServer() {
  return new Promise((resolve, reject) => {
    const fs = require('fs');
    const path = require('path');

    const serverPath = getPythonExecutablePath('server');
    const resourcePath = getResourcePath();
    
    if (server !== null) {
      log('–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return resolve();
    }

    log('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
    log(`–ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É: ${serverPath}`);
    log(`–ü—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º: ${resourcePath}`);

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    // const env = {
    //   ...process.env,  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    //   NODE_ENV: isDev ? 'development' : 'production',
    //   RESOURCE_PATH: resourcePath
    // };

    server = spawn(serverPath, {
      cwd: resourcePath
    });
    
    server.stdout.pipe(logStream);
    server.stderr.pipe(logStream);
    log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    
    server.on('error', (err) => {
      log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.toString()}`, 'ERROR');
      reject(err);
    });

    server.stdout.on('data', (data) => {
      log(`[SERVER] ${data.toString().trim()}`);
    });

    server.stderr.on('data', (data) => {
      log(`[SERVER-ERROR] ${data.toString().trim()}`, 'ERROR');
    });

    const timeout = 60000;
    const startTime = Date.now();

    const checkServerReady = setInterval(() => {
      if (fs.existsSync(portFile)) {
        const port = fs.readFileSync(portFile, 'utf-8').trim();
        log(`–ù–∞–π–¥–µ–Ω –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${port}`);

        waitForServerReady(port)
          .then(() => {
            clearInterval(checkServerReady);
            log('–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            resolve();
          })
          .catch((err) => {
            clearInterval(checkServerReady);
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`, 'ERROR');
            reject(err);
          });
      } else if (Date.now() - startTime > timeout) {
        clearInterval(checkServerReady);
        log('port.txt –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è', 'ERROR');
        reject(new Error('port.txt –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è'));
      }
    }, 500);
  });
}

app.on('before-quit', () => {
  const axios = require('axios');
  
  if (server && !server.killed) {
    log("–ü–´–¢–ê–Æ–°–¨ –ó–ê–ö–†–´–¢–¨ –°–ï–†–í–ï–†");
    const port = fs.readFileSync(portFile, 'utf-8').trim();
    axios.delete(`http://127.0.0.1:${port}/kill`);
  }
  
  if (fs.existsSync(portFile)) {
    fs.unlinkSync(portFile);
    log('–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª port.txt')
  }

  log('üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  app.exit();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  log(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`, 'ERROR');
});

process.on('unhandledRejection', (reason, promise) => {
  log(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞: ${reason}`, 'ERROR');
});